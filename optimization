#Optimization
path <- "C:/Users/Usuario/Documents/cursos/Data Analysis/forHackers"
setwd(path)
heights.weights <- read.csv("01_heights_weights_genders.csv")
height.to.weight <- function(height, a, b){
  return(a+b*height)
}
coef(lm(Weight~Height, data = heights.weights))
squared.error <- function(heights.weights, a, b){
  predictions <- with(heights.weights, height.to.weight(Height, a, b))
  error <- with(heights.weights, Weight - predictions)
  return(sum(error^2))
}
for(a in seq(-1, 1, by = 1)){
  for(b in seq(-1, 1, by = 1)) {
    print(squared.error(heights.weights, a, b))
  }
}
#Optim
optim(c(0,0),
      function(x){
        squared.error(heights.weights, x[1], x[2])
      })
a.error <- function(a){
  return(squared.error(heights.weights, a, 0))
}
curve(sapply(x, function(a){a.error(a)}), from = -1000, to = 1000)
b.error <- function(b){
  return(squared.error(heights.weights, 0, b))
}
curve(sapply(x, function(b) {b.error(b)}), from = -1000, to = 1000)
ridge.error <- function(heights.weights, a, b, lambda){
  predictions <- with(heights.weights, height.to.weight(Height, a, b))
  errors <- with(heights.weights, Weight - predictions)
  return(sum(errors^2) + lambda * (a^2 + b^2))
}
lambda <- 1
optim(c(0, 0), function(x){
  ridge.error(heights.weights, x[1], x[2], lambda)
})
#Metropolis Method
english <- c("a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k",
            "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", 
              "x", "y", "z")
caesar.cipher <- list()
inverse.caesar.cipher <- list()
for(index in 1:length(english)){
  caesar.cipher[[english[index]]] <- english[index %% 26 + 1]
  inverse.caesar.cipher[[english[index %% 26 + 1]]] <- english[index]
}
caesar.cipher  
inverse.caesar.cipher
apply.cipher.to.string <- function(string, cipher){
  output <- ""
  for(i in 1:nchar(string)){
    output <- paste(output, cipher[[substr(string, i, i)]], sep = "")
  }
  output
}
apply.cipher.to.text <- function(text, cipher){
  output <- c()
  for(string in text){
    output <- c(output, apply.cipher.to.string(string, cipher))
  }
output
}
apply.cipher.to.text(c("sample", "text"), caesar.cipher)
apply.cipher.to.text(c("tbnqmf", "ufyu"), inverse.caesar.cipher)
apply.cipher.to.text(c("sample", "text"), inverse.caesar.cipher)
apply.cipher.to.text(c("rzlokd", "sdws"), caesar.cipher)
generate.random.cipher <- function(){
  cipher <- list()
  inputs <- english
  outputs <- english[sample(1:length(english),length(english))]
  for (index in 1:length(english)){
    cipher[[inputs[index]]] <- outputs[index]
  }
    cipher
}
modify.cipher <- function(cipher, input, output){
    new.cipher <- cipher
    new.cipher[[input]] <- output
    old.output <- cipher[[input]]
    collateral.input <- names(which(sapply(names(cipher), 
                              function(key){cipher[[key]]}) == output))
    new.cipher[[collateral.input]] <- old.output
    new.cipher
}
propose.modified.cipher <- function(cipher){
  input <- sample(names(cipher), 1)
  output <- sample(english, 1)
  modify.cipher(cipher, input, output)
}  
load("C:/Users/Usuario/Documents/cursos/Data Analysis/forHackers/lexical_database.Rdata")
lexical.database[["a"]]
load(file.path(path, 'lexical_database.Rdata'))
lexical.database[["a"]]
lexical.database[["the"]]
lexical.database[["data"]]
one.gram.probability <- function(one.gram, lexical.database=list()){
  lexical.probability <- lexical.database[[one.gram]]
  if (is.null(lexical.probability) || is.na(lexical.probability)){
    .Machine$double.eps
  }
  else{
    lexical.probability
  }
}
log.probability.of.text <- function(text, cipher, lexical.database = list()){
  log.probability <- 0.0
  for(string in text){
    decrypted.string <- apply.cipher.to.string(string, cipher)
    log.probability <- log.probability + log(one.gram.probability(decrypted.string, lexical.database))
    log(one.gram.probability(decrypted.string, lexical.database))
  }
log.probability
}
metropolis.step <- function(text, cipher, lexical.database = list()){
  proposed.cipher <- propose.modified.cipher(cipher)
  lp1 <- log.probability.of.text(text, cipher, lexical.database)
  lp2 <- log.probability.of.text(text, proposed.cipher, lexical.database)
  if(lp2 > lp1){
  proposed.cipher
  }
  else{
    a <- exp(lp2 - lp1)
    x <- runif(1)
    if(x < a){
      proposed.cipher
    }
    else{
      cipher
    }
  }
}
decrypted.text <- c("here", "is", "some", "sample", "text")
encrypted.text <- apply.cipher.to.text(decrypted.text, caesar.cipher)
set.seed(1)
cipher <- generate.random.cipher()
results <- data.frame()
number.of.iterations <- 50000
for(iteration in 1:number.of.iterations){
  log.probability <- log.probability.of.text(encrypted.text, cipher, lexical.database)
  current.decrypted.text <- paste(apply.cipher.to.text(encrypted.text, cipher),
                                  collapse = " ")
  correct.text <- as.numeric(current.decrypted.text == paste(decrypted.text,
                                                             collapse = " "))
  results <- rbind(results, data.frame(iteration, log.probability, current.decrypted.text,
                                       correct.text))
  cipher <- metropolis.step(encrypted.text, cipher, lexical.database)
}
write.table(results, file = "resultados.csv", row.names = F, sep = "\t")
